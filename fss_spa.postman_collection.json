{
	"info": {
		"_postman_id": "21162261-ab2c-4072-bf62-8f227525b338",
		"name": "FortiSASE_SPA_Collation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16536300",
		"_collection_link": "https://fss-cseemeacrew-909469.postman.co/workspace/Team-Workspace~461a582b-23f8-4aa4-81a7-1755be4115a8/collection/16536300-21162261-ab2c-4072-bf62-8f227525b338?action=share&source=collection_link&creator=16536300"
	},
	"item": [
		{
			"name": "SPA_Config",
			"item": [
				{
					"name": "SPA Network Config",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"waitOnTask(100);",
									"",
									"function waitOnTask(retries) {",
									"    if (!retries) {",
									"        pm.test(\"Task completed\", function() {",
									"            pm.expect(0).to.equal(1, \"Timeout while waiting for task completion\");     ",
									"        });",
									"        postman.setNextRequest(null);",
									"    }",
									"    else {",
									"        pm.sendRequest({",
									"            url: \"https://portal.prod.fortisase.com/resource-api/v1/private-access/network-configuration\",",
									"            method: 'GET',",
									"            header: \"Content-Type:application/json\",",
									"            auth: {",
									"            \ttype: \"bearer\",",
									"            \tbearer: [",
									"            \t{",
									"            \t\tkey: \"token\",",
									"            \t\tvalue: pm.environment.get(\"token\"),",
									"            \t\ttype: \"string\"",
									"            \t}]",
									"            }",
									"        }, function(err, response) {",
									"            var jsonData = response.json();",
									"            if (err ){",
									"                    console.error(\"There was an error in the request:\", err);",
									"                    postman.setNextRequest(null); ",
									"            }",
									"            else if (jsonData.data.config_state == \"failed\"){",
									"                    pm.test(\"Config failed\",function() {",
									"                        pm.expect(jsonData.data.config_state).to.equal(\"failed\");",
									"                    });",
									"                    postman.setNextRequest(null);",
									"                } else if (jsonData.data.config_state == \"success\") {",
									"                    pm.test(\"Config succeeded! Moving to the next task.\", function(){",
									"                        pm.expect(jsonData.data.config_state).to.equal(\"success\");",
									"                    });",
									"                } else {",
									"                console.log(\"Task not yet completed. Checking again.\");",
									"                setTimeout(function() {",
									"                    waitOnTask(--retries);",
									"                }, 10000);",
									"            }",
									"        });",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"bgp_design\": \"{{bgp_design}}\",\n    \"bgp_router_ids_subnet\": \"{{bgp_router_ids_subnet}}\",\n    \"as_number\": \"{{as_number}}\",\n    \"recursive_next_hop\": true,\n    \"sdwan_rule_enable\": true,\n    \"sdwan_health_check_vm\": \"{{sdwan_health_check_vm}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://portal.prod.fortisase.com/resource-api/v1/private-access/network-configuration",
							"protocol": "https",
							"host": [
								"portal",
								"prod",
								"fortisase",
								"com"
							],
							"path": [
								"resource-api",
								"v1",
								"private-access",
								"network-configuration"
							]
						}
					},
					"response": []
				},
				{
					"name": "SPA SC Config - H1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"let scid = jsonData.data.id;",
									"",
									"pm.environment.set(\"h1_id\", scid);",
									"",
									"let regionCostKeys = Object.keys(jsonData.data.config.region_cost);",
									"",
									"let pop1 = regionCostKeys[0];",
									"let pop2 = regionCostKeys.length > 1 ? regionCostKeys[1] : null;",
									"let pop3 = regionCostKeys.length > 2 ? regionCostKeys[2] : null;",
									"let pop4 = regionCostKeys.length > 3 ? regionCostKeys[3] : null;",
									"",
									"pm.environment.set(\"pop1_id\", pop1);",
									"pm.environment.set(\"pop2_id\", pop2);",
									"pm.environment.set(\"pop3_id\", pop3);",
									"pm.environment.set(\"pop4_id\", pop4);",
									"",
									"if (scid) {",
									"",
									"function waitOnTask(retries) {",
									"    if (!retries) {",
									"        pm.test(\"Task completed\", function() {",
									"            pm.expect(0).to.equal(1, \"Timeout while waiting for task completion\");     ",
									"        });",
									"        postman.setNextRequest(null);",
									"    }",
									"    else {",
									"        pm.sendRequest({",
									"            url:\"https://portal.prod.fortisase.com/resource-api/v1/private-access/service-connections/\" + scid,",
									"            method: 'GET',",
									"            header: \"Content-Type:application/json\",",
									"            auth: {",
									"            \ttype: \"bearer\",",
									"            \tbearer: [",
									"            \t{",
									"            \t\tkey: \"token\",",
									"            \t\tvalue: pm.environment.get(\"token\"),",
									"            \t\ttype: \"string\"",
									"            \t}]}",
									"        }, function(err, response) {",
									"            var jsonData = response.json();",
									"            if (err || jsonData.code !== 200){",
									"                pm.test(\"Error in request or status code not 200 in response body\", function() {",
									"                    pm.expect(err, \"There was an error in the request\").to.be.null;",
									"                    pm.expect(jsonData.code, \"Response body code is not 200\").to.equal(200);",
									"                });",
									"                postman.setNextRequest(null);",
									"            } ",
									"            else if (jsonData.data.config_state == \"failed\"){",
									"                    pm.test(\"Config failed\",function() {",
									"                        pm.expect(jsonData.data.config_state).to.equal(\"failed\");",
									"                    });",
									"                    postman.setNextRequest(null);",
									"                } else if (jsonData.data.config_state == \"success\") {",
									"                    pm.test(\"Config succeeded! Moving to the next tesk.\", function(){",
									"                        pm.expect(jsonData.data.config_state).to.equal(\"success\");",
									"                    });",
									"                } else {",
									"                console.log(\"Task not yet completed. Checking again.\");",
									"                setTimeout(function() {",
									"                    waitOnTask(--retries);",
									"                }, 10000);",
									"            }",
									"        });",
									"    }",
									"}",
									"",
									"waitOnTask(100);",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"{{bgp_design}}\",\n    \"alias\": \"H1\",\n    \"auth\": \"{{spa_auth}}\",\n    \"bgp_peer_ip\": \"{{h1_bgp_peer_ip}}\",\n    \"ipsec_pre_shared_key\": \"{{ipsec_psk}}\",\n    \"ipsec_ike_version\": \"2\",\n    \"ipsec_remote_gw\": \"{{h1_ip}}\",\n    \"overlay_network_id\": \"{{h1_overlay_id}}\",\n    \"route_map_tag\": \"{{h1_route_tag}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://portal.prod.fortisase.com/resource-api/v1/private-access/service-connections",
							"protocol": "https",
							"host": [
								"portal",
								"prod",
								"fortisase",
								"com"
							],
							"path": [
								"resource-api",
								"v1",
								"private-access",
								"service-connections"
							]
						}
					},
					"response": []
				},
				{
					"name": "SPA SC Config - H2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"let scid = jsonData.data.id;",
									"",
									"pm.environment.set(\"h2_id\", scid);",
									"",
									"",
									"if (scid) {",
									"",
									"function waitOnTask(retries) {",
									"    if (!retries) {",
									"        pm.test(\"Task completed\", function() {",
									"            pm.expect(0).to.equal(1, \"Timeout while waiting for task completion\");     ",
									"        });",
									"        postman.setNextRequest(null);",
									"    }",
									"    else {",
									"        pm.sendRequest({",
									"            url:\"https://portal.prod.fortisase.com/resource-api/v1/private-access/service-connections/\" + scid,",
									"            method: 'GET',",
									"            header: \"Content-Type:application/json\",",
									"            auth: {",
									"            \ttype: \"bearer\",",
									"            \tbearer: [",
									"            \t{",
									"            \t\tkey: \"token\",",
									"            \t\tvalue: pm.environment.get(\"token\"),",
									"            \t\ttype: \"string\"",
									"            \t}]}",
									"        }, function(err, response) {",
									"            var jsonData = response.json();",
									"            if (err || jsonData.code !== 200){",
									"                pm.test(\"Error in request or status code not 200 in response body\", function() {",
									"                    pm.expect(err, \"There was an error in the request\").to.be.null;",
									"                    pm.expect(jsonData.code, \"Response body code is not 200\").to.equal(200);",
									"                });",
									"                postman.setNextRequest(null);",
									"            } ",
									"            else if (jsonData.data.config_state == \"failed\"){",
									"                    pm.test(\"Config failed\",function() {",
									"                        pm.expect(jsonData.data.config_state).to.equal(\"failed\");",
									"                    });",
									"                    postman.setNextRequest(null);",
									"                } else if (jsonData.data.config_state == \"success\") {",
									"                    pm.test(\"Config succeeded! Moving to the next tesk.\", function(){",
									"                        pm.expect(jsonData.data.config_state).to.equal(\"success\");",
									"                    });",
									"                } else {",
									"                console.log(\"Task not yet completed. Checking again.\");",
									"                setTimeout(function() {",
									"                    waitOnTask(--retries);",
									"                }, 10000);",
									"            }",
									"        });",
									"    }",
									"}",
									"",
									"waitOnTask(100);",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"{{bgp_design}}\",\n    \"alias\": \"H2\",\n    \"auth\": \"{{spa_auth}}\",\n    \"bgp_peer_ip\": \"{{h2_bgp_peer_ip}}\",\n    \"ipsec_pre_shared_key\": \"{{ipsec_psk}}\",\n    \"ipsec_ike_version\": \"2\",\n    \"ipsec_remote_gw\": \"{{h2_ip}}\",\n    \"overlay_network_id\": \"{{h2_overlay_id}}\",\n    \"route_map_tag\": \"{{h2_route_tag}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://portal.prod.fortisase.com/resource-api/v1/private-access/service-connections",
							"protocol": "https",
							"host": [
								"portal",
								"prod",
								"fortisase",
								"com"
							],
							"path": [
								"resource-api",
								"v1",
								"private-access",
								"service-connections"
							]
						}
					},
					"response": []
				},
				{
					"name": "SPA SC Config - H3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"let scid = jsonData.data.id;",
									"",
									"pm.environment.set(\"h3_id\", scid);",
									"",
									"if (scid) {",
									"",
									"function waitOnTask(retries) {",
									"    if (!retries) {",
									"        pm.test(\"Task completed\", function() {",
									"            pm.expect(0).to.equal(1, \"Timeout while waiting for task completion\");     ",
									"        });",
									"        postman.setNextRequest(null);",
									"    }",
									"    else {",
									"        pm.sendRequest({",
									"            url:\"https://portal.prod.fortisase.com/resource-api/v1/private-access/service-connections/\" + scid,",
									"            method: 'GET',",
									"            header: \"Content-Type:application/json\",",
									"            auth: {",
									"            \ttype: \"bearer\",",
									"            \tbearer: [",
									"            \t{",
									"            \t\tkey: \"token\",",
									"            \t\tvalue: pm.environment.get(\"token\"),",
									"            \t\ttype: \"string\"",
									"            \t}]}",
									"        }, function(err, response) {",
									"            var jsonData = response.json();",
									"            if (err || jsonData.code !== 200){",
									"                pm.test(\"Error in request or status code not 200 in response body\", function() {",
									"                    pm.expect(err, \"There was an error in the request\").to.be.null;",
									"                    pm.expect(jsonData.code, \"Response body code is not 200\").to.equal(200);",
									"                });",
									"                postman.setNextRequest(null);",
									"            } ",
									"            else if (jsonData.data.config_state == \"failed\"){",
									"                    pm.test(\"Config failed\",function() {",
									"                        pm.expect(jsonData.data.config_state).to.equal(\"failed\");",
									"                    });",
									"                    postman.setNextRequest(null);",
									"                } else if (jsonData.data.config_state == \"success\") {",
									"                    pm.test(\"Config succeeded! Moving to the next tesk.\", function(){",
									"                        pm.expect(jsonData.data.config_state).to.equal(\"success\");",
									"                    });",
									"                } else {",
									"                console.log(\"Task not yet completed. Checking again.\");",
									"                setTimeout(function() {",
									"                    waitOnTask(--retries);",
									"                }, 10000);",
									"            }",
									"        });",
									"    }",
									"}",
									"",
									"waitOnTask(100);",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"{{bgp_design}}\",\n    \"alias\": \"H3\",\n    \"auth\": \"{{spa_auth}}\",\n    \"bgp_peer_ip\": \"{{h3_bgp_peer_ip}}\",\n    \"ipsec_pre_shared_key\": \"{{ipsec_psk}}\",\n    \"ipsec_ike_version\": \"2\",\n    \"ipsec_remote_gw\": \"{{h3_ip}}\",\n    \"overlay_network_id\": \"{{h3_overlay_id}}\",\n    \"route_map_tag\": \"{{h3_route_tag}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://portal.prod.fortisase.com/resource-api/v1/private-access/service-connections",
							"protocol": "https",
							"host": [
								"portal",
								"prod",
								"fortisase",
								"com"
							],
							"path": [
								"resource-api",
								"v1",
								"private-access",
								"service-connections"
							]
						}
					},
					"response": []
				},
				{
					"name": "SPA SC Config - H4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"let scid = jsonData.data.id;",
									"",
									"pm.environment.set(\"h4_id\", scid);",
									"",
									"if (scid) {",
									"",
									"function waitOnTask(retries) {",
									"    if (!retries) {",
									"        pm.test(\"Task completed\", function() {",
									"            pm.expect(0).to.equal(1, \"Timeout while waiting for task completion\");     ",
									"        });",
									"        postman.setNextRequest(null);",
									"    }",
									"    else {",
									"        pm.sendRequest({",
									"            url:\"https://portal.prod.fortisase.com/resource-api/v1/private-access/service-connections/\" + scid,",
									"            method: 'GET',",
									"            header: \"Content-Type:application/json\",",
									"            auth: {",
									"            \ttype: \"bearer\",",
									"            \tbearer: [",
									"            \t{",
									"            \t\tkey: \"token\",",
									"            \t\tvalue: pm.environment.get(\"token\"),",
									"            \t\ttype: \"string\"",
									"            \t}]}",
									"        }, function(err, response) {",
									"            var jsonData = response.json();",
									"            if (err || jsonData.code !== 200){",
									"                pm.test(\"Error in request or status code not 200 in response body\", function() {",
									"                    pm.expect(err, \"There was an error in the request\").to.be.null;",
									"                    pm.expect(jsonData.code, \"Response body code is not 200\").to.equal(200);",
									"                });",
									"                postman.setNextRequest(null);",
									"            } ",
									"            else if (jsonData.data.config_state == \"failed\"){",
									"                    pm.test(\"Config failed\",function() {",
									"                        pm.expect(jsonData.data.config_state).to.equal(\"failed\");",
									"                    });",
									"                    postman.setNextRequest(null);",
									"                } else if (jsonData.data.config_state == \"success\") {",
									"                    pm.test(\"Config succeeded! Moving to the next tesk.\", function(){",
									"                        pm.expect(jsonData.data.config_state).to.equal(\"success\");",
									"                    });",
									"                } else {",
									"                console.log(\"Task not yet completed. Checking again.\");",
									"                setTimeout(function() {",
									"                    waitOnTask(--retries);",
									"                }, 10000);",
									"            }",
									"        });",
									"    }",
									"}",
									"",
									"waitOnTask(100);",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"{{bgp_design}}\",\n    \"alias\": \"H4\",\n    \"auth\": \"{{spa_auth}}\",\n    \"bgp_peer_ip\": \"{{h4_bgp_peer_ip}}\",\n    \"ipsec_pre_shared_key\": \"{{ipsec_psk}}\",\n    \"ipsec_ike_version\": \"2\",\n    \"ipsec_remote_gw\": \"{{h4_ip}}\",\n    \"overlay_network_id\": \"{{h4_overlay_id}}\",\n    \"route_map_tag\": \"{{h4_route_tag}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://portal.prod.fortisase.com/resource-api/v1/private-access/service-connections",
							"protocol": "https",
							"host": [
								"portal",
								"prod",
								"fortisase",
								"com"
							],
							"path": [
								"resource-api",
								"v1",
								"private-access",
								"service-connections"
							]
						}
					},
					"response": []
				},
				{
					"name": "SPA Cost per Hub",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"{{pop1_id}}\": {\n    \"{{h1_id}}\": 50,\n    \"{{h2_id}}\": 50,\n    \"{{h3_id}}\": 50,\n    \"{{h4_id}}\": 50\n  },\n  \"{{pop2_id}}\": {\n    \"{{h1_id}}\": 50,\n    \"{{h2_id}}\": 50,\n    \"{{h3_id}}\": 50,\n    \"{{h4_id}}\": 50\n  },\n  \"{{pop3_id}}\": {\n    \"{{h1_id}}\": 50,\n    \"{{h2_id}}\": 50,\n    \"{{h3_id}}\": 50,\n    \"{{h4_id}}\": 50\n  },\n  \"{{pop4_id}}\": {\n    \"{{h1_id}}\": 50,\n    \"{{h2_id}}\": 50,\n    \"{{h3_id}}\": 50,\n    \"{{h4_id}}\": 50\n  } \n}"
						},
						"url": {
							"raw": "https://portal.prod.fortisase.com/resource-api/v1/private-access/service-connections/region_cost",
							"protocol": "https",
							"host": [
								"portal",
								"prod",
								"fortisase",
								"com"
							],
							"path": [
								"resource-api",
								"v1",
								"private-access",
								"service-connections",
								"region_cost"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "ADD YOUR TOKEN HERE!",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "SPA_Monitor",
			"item": [
				{
					"name": "SPA Network Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {},
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://portal.prod.fortisase.com/resource-api/v1/private-access/network-configuration",
							"protocol": "https",
							"host": [
								"portal",
								"prod",
								"fortisase",
								"com"
							],
							"path": [
								"resource-api",
								"v1",
								"private-access",
								"network-configuration"
							]
						}
					},
					"response": []
				},
				{
					"name": "SPA SCs Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {},
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://portal.prod.fortisase.com/resource-api/v1/private-access/service-connections",
							"protocol": "https",
							"host": [
								"portal",
								"prod",
								"fortisase",
								"com"
							],
							"path": [
								"resource-api",
								"v1",
								"private-access",
								"service-connections"
							]
						}
					},
					"response": []
				},
				{
					"name": "SPA SC Status - H1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {},
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://portal.prod.fortisase.com/resource-api/v1/private-access/service-connections/{{h1_id}}",
							"protocol": "https",
							"host": [
								"portal",
								"prod",
								"fortisase",
								"com"
							],
							"path": [
								"resource-api",
								"v1",
								"private-access",
								"service-connections",
								"{{h1_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SPA SC Status - H2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {},
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://portal.prod.fortisase.com/resource-api/v1/private-access/service-connections/{{h2_id}}",
							"protocol": "https",
							"host": [
								"portal",
								"prod",
								"fortisase",
								"com"
							],
							"path": [
								"resource-api",
								"v1",
								"private-access",
								"service-connections",
								"{{h2_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SPA SC Status - H3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {},
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://portal.prod.fortisase.com/resource-api/v1/private-access/service-connections/{{h3_id}}",
							"protocol": "https",
							"host": [
								"portal",
								"prod",
								"fortisase",
								"com"
							],
							"path": [
								"resource-api",
								"v1",
								"private-access",
								"service-connections",
								"{{h3_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SPA SC Status - H4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {},
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://portal.prod.fortisase.com/resource-api/v1/private-access/service-connections/{{h4_id}}",
							"protocol": "https",
							"host": [
								"portal",
								"prod",
								"fortisase",
								"com"
							],
							"path": [
								"resource-api",
								"v1",
								"private-access",
								"service-connections",
								"{{h4_id}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "PUT YOUR TOKEN HERE!",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "SPA_Delete",
			"item": [
				{
					"name": "SPA SC Delete - H1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let scid = pm.environment.get(\"h1_id\");",
									"",
									"waitOnTask(100);",
									"",
									"function waitOnTask(retries) {",
									"    if (!retries) {",
									"        pm.test(\"Task completed\", function() {",
									"            pm.expect(0).to.equal(1, \"Timeout while waiting for task completion\");     ",
									"        });",
									"        postman.setNextRequest(null);",
									"    }",
									"    else {",
									"        pm.sendRequest({",
									"            url: \"https://portal.prod.fortisase.com/resource-api/v1/private-access/service-connections/\" + scid,",
									"            method: 'GET',",
									"            header: \"Content-Type:application/json\",",
									"            auth: {",
									"            \ttype: \"bearer\",",
									"            \tbearer: [",
									"            \t{",
									"            \t\tkey: \"token\",",
									"            \t\tvalue: pm.environment.get(\"token\"),",
									"            \t\ttype: \"string\"",
									"            \t}]",
									"            }",
									"        }, function(err, response) {",
									"            var jsonData = response.json();",
									"            if (err ){",
									"                    console.error(\"There was an error in the request. Breakin git!\", err);",
									"                    postman.setNextRequest(null); ",
									"            } else if (jsonData.code == \"403\") {",
									"                pm.test(\"Config deleted! Moving to the next task.\", function(){",
									"                    pm.expect(jsonData.code).to.equal(\"403\");",
									"                });",
									"            } else if (jsonData.data.config_state == \"failed\"){",
									"                    pm.test(\"Config failed\",function() {",
									"                        pm.expect(jsonData.data.config_state).to.equal(\"failed\");",
									"                    });",
									"                    postman.setNextRequest(null);",
									"                } else if (jsonData.data.config_state == \"deleted\") {",
									"                    pm.test(\"Config deleted! Moving to the next task.\", function(){",
									"                        pm.expect(jsonData.data.config_state).to.equal(\"deleted\");",
									"                    });",
									"                } else {",
									"                console.log(\"Task not yet completed. Checking again.\");",
									"                setTimeout(function() {",
									"                    waitOnTask(--retries);",
									"                }, 10000);",
									"            }",
									"        });",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://portal.prod.fortisase.com/resource-api/v1/private-access/service-connections/{{h1_id}}",
							"protocol": "https",
							"host": [
								"portal",
								"prod",
								"fortisase",
								"com"
							],
							"path": [
								"resource-api",
								"v1",
								"private-access",
								"service-connections",
								"{{h1_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SPA SC Delete - H2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let scid = pm.environment.get(\"h2_id\");",
									"",
									"waitOnTask(100);",
									"",
									"function waitOnTask(retries) {",
									"    if (!retries) {",
									"        pm.test(\"Task completed\", function() {",
									"            pm.expect(0).to.equal(1, \"Timeout while waiting for task completion\");     ",
									"        });",
									"        postman.setNextRequest(null);",
									"    }",
									"    else {",
									"        pm.sendRequest({",
									"            url: \"https://portal.prod.fortisase.com/resource-api/v1/private-access/service-connections/\" + scid,",
									"            method: 'GET',",
									"            header: \"Content-Type:application/json\",",
									"            auth: {",
									"            \ttype: \"bearer\",",
									"            \tbearer: [",
									"            \t{",
									"            \t\tkey: \"token\",",
									"            \t\tvalue: pm.environment.get(\"token\"),",
									"            \t\ttype: \"string\"",
									"            \t}]",
									"            }",
									"        }, function(err, response) {",
									"            var jsonData = response.json();",
									"            if (err ){",
									"                    console.error(\"There was an error in the request. Breakin git!\", err);",
									"                    postman.setNextRequest(null); ",
									"            } else if (jsonData.code == \"403\") {",
									"                pm.test(\"Config deleted! Moving to the next task.\", function(){",
									"                    pm.expect(jsonData.code).to.equal(\"403\");",
									"                });",
									"            } else if (jsonData.data.config_state == \"failed\"){",
									"                    pm.test(\"Config failed\",function() {",
									"                        pm.expect(jsonData.data.config_state).to.equal(\"failed\");",
									"                    });",
									"                    postman.setNextRequest(null);",
									"                } else if (jsonData.data.config_state == \"deleted\") {",
									"                    pm.test(\"Config deleted! Moving to the next task.\", function(){",
									"                        pm.expect(jsonData.data.config_state).to.equal(\"deleted\");",
									"                    });",
									"                } else {",
									"                console.log(\"Task not yet completed. Checking again.\");",
									"                setTimeout(function() {",
									"                    waitOnTask(--retries);",
									"                }, 10000);",
									"            }",
									"        });",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://portal.prod.fortisase.com/resource-api/v1/private-access/service-connections/{{h2_id}}",
							"protocol": "https",
							"host": [
								"portal",
								"prod",
								"fortisase",
								"com"
							],
							"path": [
								"resource-api",
								"v1",
								"private-access",
								"service-connections",
								"{{h2_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SPA SC Delete - H3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let scid = pm.environment.get(\"h3_id\");",
									"",
									"waitOnTask(100);",
									"",
									"function waitOnTask(retries) {",
									"    if (!retries) {",
									"        pm.test(\"Task completed\", function() {",
									"            pm.expect(0).to.equal(1, \"Timeout while waiting for task completion\");     ",
									"        });",
									"        postman.setNextRequest(null);",
									"    }",
									"    else {",
									"        pm.sendRequest({",
									"            url: \"https://portal.prod.fortisase.com/resource-api/v1/private-access/service-connections/\" + scid,",
									"            method: 'GET',",
									"            header: \"Content-Type:application/json\",",
									"            auth: {",
									"            \ttype: \"bearer\",",
									"            \tbearer: [",
									"            \t{",
									"            \t\tkey: \"token\",",
									"            \t\tvalue: pm.environment.get(\"token\"),",
									"            \t\ttype: \"string\"",
									"            \t}]",
									"            }",
									"        }, function(err, response) {",
									"            var jsonData = response.json();",
									"            if (err ){",
									"                    console.error(\"There was an error in the request. Breakin git!\", err);",
									"                    postman.setNextRequest(null); ",
									"            } else if (jsonData.code == \"403\") {",
									"                pm.test(\"Config deleted! Moving to the next task.\", function(){",
									"                    pm.expect(jsonData.code).to.equal(\"403\");",
									"                });",
									"            } else if (jsonData.data.config_state == \"failed\"){",
									"                    pm.test(\"Config failed\",function() {",
									"                        pm.expect(jsonData.data.config_state).to.equal(\"failed\");",
									"                    });",
									"                    postman.setNextRequest(null);",
									"                } else if (jsonData.data.config_state == \"deleted\") {",
									"                    pm.test(\"Config deleted! Moving to the next task.\", function(){",
									"                        pm.expect(jsonData.data.config_state).to.equal(\"deleted\");",
									"                    });",
									"                } else {",
									"                console.log(\"Task not yet completed. Checking again.\");",
									"                setTimeout(function() {",
									"                    waitOnTask(--retries);",
									"                }, 10000);",
									"            }",
									"        });",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://portal.prod.fortisase.com/resource-api/v1/private-access/service-connections/{{h3_id}}",
							"protocol": "https",
							"host": [
								"portal",
								"prod",
								"fortisase",
								"com"
							],
							"path": [
								"resource-api",
								"v1",
								"private-access",
								"service-connections",
								"{{h3_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SPA SC Delete - H4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let scid = pm.environment.get(\"h4_id\");",
									"",
									"waitOnTask(100);",
									"",
									"function waitOnTask(retries) {",
									"    if (!retries) {",
									"        pm.test(\"Task completed\", function() {",
									"            pm.expect(0).to.equal(1, \"Timeout while waiting for task completion\");     ",
									"        });",
									"        postman.setNextRequest(null);",
									"    }",
									"    else {",
									"        pm.sendRequest({",
									"            url: \"https://portal.prod.fortisase.com/resource-api/v1/private-access/service-connections/\" + scid,",
									"            method: 'GET',",
									"            header: \"Content-Type:application/json\",",
									"            auth: {",
									"            \ttype: \"bearer\",",
									"            \tbearer: [",
									"            \t{",
									"            \t\tkey: \"token\",",
									"            \t\tvalue: pm.environment.get(\"token\"),",
									"            \t\ttype: \"string\"",
									"            \t}]",
									"            }",
									"        }, function(err, response) {",
									"            var jsonData = response.json();",
									"            if (err ){",
									"                    console.error(\"There was an error in the request. Breakin git!\", err);",
									"                    postman.setNextRequest(null); ",
									"            } else if (jsonData.code == \"403\") {",
									"                pm.test(\"Config deleted! Moving to the next task.\", function(){",
									"                    pm.expect(jsonData.code).to.equal(\"403\");",
									"                });",
									"            } else if (jsonData.data.config_state == \"failed\"){",
									"                    pm.test(\"Config failed\",function() {",
									"                        pm.expect(jsonData.data.config_state).to.equal(\"failed\");",
									"                    });",
									"                    postman.setNextRequest(null);",
									"                } else if (jsonData.data.config_state == \"deleted\") {",
									"                    pm.test(\"Config deleted! Moving to the next task.\", function(){",
									"                        pm.expect(jsonData.data.config_state).to.equal(\"deleted\");",
									"                    });",
									"                } else {",
									"                console.log(\"Task not yet completed. Checking again.\");",
									"                setTimeout(function() {",
									"                    waitOnTask(--retries);",
									"                }, 10000);",
									"            }",
									"        });",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://portal.prod.fortisase.com/resource-api/v1/private-access/service-connections/{{h4_id}}",
							"protocol": "https",
							"host": [
								"portal",
								"prod",
								"fortisase",
								"com"
							],
							"path": [
								"resource-api",
								"v1",
								"private-access",
								"service-connections",
								"{{h4_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SPA Network Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"waitOnTask(100);",
									"",
									"function waitOnTask(retries) {",
									"    if (!retries) {",
									"        pm.test(\"Task completed\", function() {",
									"            pm.expect(0).to.equal(1, \"Timeout while waiting for task completion\");     ",
									"        });",
									"        postman.setNextRequest(null);",
									"    }",
									"    else {",
									"        pm.sendRequest({",
									"            url: \"https://portal.prod.fortisase.com/resource-api/v1/private-access/network-configuration\",",
									"            method: 'GET',",
									"            header: \"Content-Type:application/json\",",
									"            auth: {",
									"            \ttype: \"bearer\",",
									"            \tbearer: [",
									"            \t{",
									"            \t\tkey: \"token\",",
									"            \t\tvalue: pm.environment.get(\"token\"),",
									"            \t\ttype: \"string\"",
									"            \t}]",
									"            }",
									"        }, function(err, response) {",
									"            var jsonData = response.json();",
									"            if (err ){",
									"                    console.error(\"There was an error in the request:\", err);",
									"                    console.log(\"Moving to the next task.\");",
									"                    postman.setNextRequest(null); ",
									"            }",
									"            else if (jsonData.data.config_state == \"failed\"){",
									"                    pm.test(\"Config failed\",function() {",
									"                        pm.expect(jsonData.data.config_state).to.equal(\"failed\");",
									"                    });",
									"                    postman.setNextRequest(null);",
									"                } else if (jsonData.data.config_state == \"success\") {",
									"                    pm.test(\"Config succeeded! Moving to the next task.\", function(){",
									"                        pm.expect(jsonData.data.config_state).to.equal(\"success\");",
									"                    });",
									"                } else {",
									"                console.log(\"Task not yet completed. Checking again.\");",
									"                setTimeout(function() {",
									"                    waitOnTask(--retries);",
									"                }, 10000);",
									"            }",
									"        });",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://portal.prod.fortisase.com/resource-api/v1/private-access/network-configuration",
							"protocol": "https",
							"host": [
								"portal",
								"prod",
								"fortisase",
								"com"
							],
							"path": [
								"resource-api",
								"v1",
								"private-access",
								"network-configuration"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "PUT YOUR TOKEN HERE!",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "PUT YOUR TOKEN HERE!",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "turbo_site_id",
			"value": "3tz7n7dt",
			"type": "string"
		},
		{
			"key": "p_sdwan_hub_id",
			"value": "15052df4-316f-40a4-9a14-7f68736a6349",
			"type": "string"
		},
		{
			"key": "r2_sdwan_hub_id",
			"value": "xxxx",
			"type": "string"
		},
		{
			"key": "r3_sdwan_hub_id",
			"value": "xxxx"
		},
		{
			"key": "r4_sdwan_hub_id",
			"value": "xxxx",
			"type": "string"
		},
		{
			"key": "h1_id",
			"value": ""
		}
	]
}